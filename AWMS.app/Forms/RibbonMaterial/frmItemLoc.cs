using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraGrid;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Base;
using System.Reflection.Emit;
using AWMS.dapper;
using AWMS.dapper.Repositories;

namespace AWMS.app.Forms.RibbonMaterial
{
    public partial class frmItemLoc : XtraForm
    {   private readonly IPackingListDapperRepository _packingListDapperRepository;
        int itemId;
        decimal itemQty;
        int repositorylocationId = 0;
        public frmItemLoc(IPackingListDapperRepository packingListDapperRepository)
        {
            InitializeComponent();
            this._packingListDapperRepository= packingListDapperRepository;
            LookUPLoad();
           

            //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
            //{
            //    //IDapper dapper = new DapperService(dbContext);
            //    _unitList = unitOfWork.DapperRepository.GetAllUnitWithDapper();
            //    repositoryItemLookUpEditunit.DataSource = _unitList.ToList();
            //}
            //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
            //{
            //    //IDapper dapper = new DapperService(dbContext);
            //    _scopeList = unitOfWork.DapperRepository.GetAllScopeWithDapper();
            //    repositoryItemLookUpEditScope.DataSource = _scopeList.ToList();
            //}
            //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
            //{
            //    //IDapper dapper = new DapperService(dbContext);
            //    _locList = unitOfWork.DapperRepository.GetAllLocationsWithDapper();
            //    locationBindingSource.DataSource = _locList.ToList();
            //}
            gridView1.OptionsView.NewItemRowPosition = NewItemRowPosition.Bottom;
            gridView1.OptionsBehavior.Editable = true;
            gridcontrol.DoubleClick += (sender, e) => gridcontrol_DoubleClick(sender, e);

            chkEdit_CheckedChanged(null, null);
        }

        private async void LookUPLoad()
        {
            lookUpEditPl.Properties.DataSource=await _packingListDapperRepository.GetAllPlNameAsync();
        }
        private void gridView1_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            //try
            //{
                GridView view = sender as GridView;
                //hamid commmmmmmmmmmmmmmmmmmmmmmmment
                //    if (e.RowHandle == DevExpress.XtraGrid.GridControl.NewItemRowHandle)
                //    {
                //        // This is a new row being added
                //        Item newItem = view.GetRow(e.RowHandle) as Item;
                //        if (newItem != null)
                //        {
                //            // Perform logic to add the new item to the database
                //            _databaseContextItem.Items.Add(newItem);

                //            // Create a new Location for the added item
                //            //Location newLocation = new Location
                //            //{
                //            //    LocationName = $"AutoGeneratedLocation_{DateTime.Now.Ticks}",
                //            //    LocationTypeId = 4,
                //            //    EnteredBy = 88,
                //            //    EnteredDate = DateTime.Now
                //            //};

                //            //_databaseContextItem.Locations.Add(newLocation);

                //            // Create a new LocItem to link the added item and the new location
                //            int LocationID;
                //            if (lookUpEditLocation.EditValue == null || string.IsNullOrWhiteSpace(lookUpEditLocation.EditValue.ToString()))
                //            {
                //                LocationID = 1;
                //            }
                //            else
                //            {
                //                LocationID = Convert.ToInt32(lookUpEditLocation.EditValue);
                //            }
                //            LocItem newLocItem = new LocItem
                //            {
                //                LocationID = LocationID,
                //                Item = newItem,
                //                Qty = newItem.Qty ?? 0,
                //                DamageQty = 0,
                //                NISQty = 0,
                //                OverQty = 0,
                //                ShortageQty = 0,
                //                EnteredBy = 88,
                //                EnteredDate = DateTime.Now
                //            };

                //            _databaseContextItem.LocItems.Add(newLocItem);

                //            // SaveChanges here to ensure both item and location are added to the database
                //            _databaseContextItem.SaveChanges();

                //            // Refresh the grid data source to reflect changes
                //            lookUpEditPl_EditValueChanged(null, null); // Refreshing Data
                //        }
                //    }
                //}
                //catch (DbUpdateException dbUpdateException)
                //{
                //    // Handle specific database update exception
                //    HandleDbUpdateException(dbUpdateException);
                //    e.Valid = false; // Mark the row as invalid to prevent it from being committed to the grid
                //}
                //catch (Exception ex)
                //{
                //    // Handle or log the exception as needed
                //    MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                //    e.Valid = false; // Mark the row as invalid to prevent it from being committed to the grid
                //}
            }

        // Helper method to handle specific DbUpdateException
        //private void HandleDbUpdateException(DbUpdateException exception)
        //{
        //    // Check for specific error conditions and provide user-friendly messages
        //    // You may extract more details from exception.Entries and exception.InnerException
        //    if (exception.InnerException is SqlException sqlException)
        //    {
        //        if (sqlException.Number == 547)
        //        {
        //            MessageBox.Show("The update violates a foreign key constraint.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        }
        //        else
        //        {
        //            MessageBox.Show($"Database update error: {sqlException.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        }
        //    }
        //    else
        //    {
        //        MessageBox.Show($"An error occurred during database update: {exception.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //    }
        //}
        private void lookUpEditPl_EditValueChanged(object sender, EventArgs e)
        {
            if (lookUpEditPl.EditValue == null || string.IsNullOrWhiteSpace(lookUpEditPl.EditValue.ToString()))
            {
                return;
            }

            int plid = Convert.ToInt32(lookUpEditPl.EditValue);
            ///hamid commmmmmmmmmmmmmmmmmmment
            //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
            //{
            //    // Get packages
            //    _pkList = unitOfWork.DapperRepository.GetPackageOfSelectedPlWithDapper(plid);
            //    repositoryItemLookUpEditPK.DataSource = _pkList.ToList();

            //    // Assuming PkId is the property that relates _pkList and _itemList
            //    var pkIds = _pkList.Select(pk => pk.PKID).ToList();

            //    // Filter _itemList in memory based on pkIds
            //    var filteredItemList = _databaseContextItem.Items
            //        .Where(item => pkIds.Contains(item.PKID))
            //        .ToList();

            //    itemBindingSource.DataSource = filteredItemList;
            //    // Enable the gridcontrol
            //    gridcontrol.Enabled = true;
            //}
            //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
            //{
            //    int lastPK = unitOfWork.PackageRepository.GetLastPackage(plid);
            //    int CountPK = unitOfWork.PackageRepository.GetPackageCount(plid);
            //    lblcount.Text = "Count Of PK : " + CountPK;
            //    lblLastPK.Text = "Last PK : " + lastPK;
            //}
        }

        private void chkEdit_CheckedChanged(object sender, EventArgs e)
        {
            if (chkEdit.Checked) { gridView1.OptionsBehavior.ReadOnly = false; } else { gridView1.OptionsBehavior.ReadOnly = true; }
        }

        private void gridcontrol_DoubleClick(object sender, EventArgs e)
        {
            GridControl gridControl = sender as GridControl;

            if (gridControl != null && gridView1 != null)
            {
                GridHitInfo hitInfo = gridView1.CalcHitInfo(gridControl.PointToClient(Control.MousePosition));

                if (hitInfo.RowHandle >= 0)
                {
                    // Get the selected ItemId from the clicked row
                    if (hitInfo.RowHandle >= 0 && hitInfo.RowHandle < gridView1.RowCount)
                    {
                        itemId = (int)gridView1.GetRowCellValue(hitInfo.RowHandle, "ItemId");
                        // Rest of your code
                    }
                    itemQty = Convert.ToDecimal(gridView1.GetRowCellValue(hitInfo.RowHandle, "Qty"));
                    ///hamid commmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmment
                    //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //{
                    //    locItemBindingSource.DataSource = unitOfWork.DapperRepository.GetLocItemOFSelectedItemIDWithDapper(itemId).ToList();
                    //}
                    //using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //{
                    //    repositoryItemLookUpEditLocation.DataSource = unitOfWork.DapperRepository.GetAllLocationsWithDapper();
                    //}

                    xtraTabControl1.SelectedTabPage = xtraTabPage2;
                    labelControl7.Text = "ItemID:  " + itemId.ToString();
                    labelControl9.Text = "ItemQty:  " + itemQty.ToString();
                    labelControl8.Text = "";
                    //MessageBox.Show(itemQty.ToString());

                    // Switch between XtraTabPages based on ItemId
                    //if (itemId == 1)
                    //{
                    //    xtraTabControl1.SelectedTabPage = xtraTabPage1;
                    //}
                    //else if (itemId == 2)
                    //{
                    //    xtraTabControl1.SelectedTabPage = xtraTabPage2;
                    //}
                }
            }
        }

        private void gridView1_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            try
            {
                GridView view = sender as GridView;

                // Check if the modified row is not a new row
                if (e.RowHandle >= 0)
                {
                    ///hamid commmmmmmmmmmmmmmmmment
                    //Item modifiedItem = view.GetRow(e.RowHandle) as Item;

                    //if (modifiedItem != null)
                    //{
                    //    //using (DatabaseContext _context = new DatabaseContext())
                    //    //{
                    //    //    IItemRepository itemRepository = new ItemService(_context);
                    //    //    itemRepository.UpdateItem(modifiedItem);
                    //    //}
                    //    using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //    {
                    //        unitOfWork.ItemRepository.UpdateItem(modifiedItem);
                    //        unitOfWork.Save();
                    //    }
                    //}
                }
            }
            catch (Exception ex)
            {
                // Handle or log the exception as needed
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void gridView2_ValidateRow(object sender, DevExpress.XtraGrid.Views.Base.ValidateRowEventArgs e)
        {
            try
            {
                GridView view = sender as GridView;

                if (e.RowHandle == DevExpress.XtraGrid.GridControl.NewItemRowHandle)
                {    //hamid commmmmmmmmmmmmmmmmmmmmmmmmment
                    //LocItem newLocItem = view.GetRow(e.RowHandle) as LocItem;
                    //if (newLocItem != null)
                    //{
                    //    newLocItem.ItemId = itemId; // Assuming itemId is a variable in your form

                    //    // Validate the new LocItem data
                    //   /// if (ValidateLocItem(newLocItem))
                    //    //{
                    //        // Add the new LocItem to the database
                    //        using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //        {
                    //            unitOfWork.LocItemRepository.AddLocitem(newLocItem);
                    //            unitOfWork.Save();
                    //        }

                    //        // Refresh the grid data source to reflect changes
                    //        using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //        {
                    //            locItemBindingSource.DataSource = unitOfWork.DapperRepository.GetLocItemOFSelectedItemIDWithDapper(itemId).ToList();
                    //        }
                    //  //  }
                    //  //  else
                    //  //  {
                    // //      Validation failed, set an error message
                    // //      view.SetColumnError(view.Columns["Qty"], "Validation failed. Please check your data.");
                    // //      e.Valid = false; // Mark the row as invalid
                    //  //}
                    //}
                }
            }
            //catch (DbUpdateException dbUpdateException)
            //{
            //    // Handle specific database update exception
            //    HandleDbUpdateException(dbUpdateException);
            //    e.Valid = false; // Mark the row as invalid to prevent it from being committed to the grid
            //}
            catch (Exception ex)
            {
                // Handle or log the exception as needed
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                e.Valid = false; // Mark the row as invalid to prevent it from being committed to the grid
            }
        }
        ///hamid commmmmmmmmmmmmmmmmmmmmmmmment
        //private bool ValidateLocItem(LocItem locItem)
        //{
        //    try
        //    {
        //        // Calculate total QtyInLoc for the given ItemId
        //        decimal totalQtyInLoc = locItemBindingSource
        //            .Cast<LocItem>()
        //            .Where(item => item.ItemId == locItem.ItemId && item.LocItemID != locItem.LocItemID)
        //            .Sum(item => item.QtyInLoc ?? 0);

        //        // Validate if total QtyInLoc is within the limit (itemQty)
        //        bool isTotalQtyValid = totalQtyInLoc + (locItem.QtyInLoc ?? 0) <= itemQty+(locItem.OverQty ?? 0)-(locItem.ShortageQty ?? 0);

        //        // Display a message in label8 based on the validation results
        //        labelControl8.Text = isTotalQtyValid
        //            ? "Validation passed."
        //            : "Validation failed. Please check your data.";

        //        return isTotalQtyValid;
        //    }
        //    catch (Exception ex)
        //    {
        //        // Handle or log the exception as needed
        //        MessageBox.Show($"An error occurred in ValidateLocItem: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        //        return false; // Consider validation failed in case of an exception
        //    }
        //}





        //private void repositoryItemLookUpEditLocation_EditValueChanged(object sender, EventArgs e)
        //{
        //    LookUpEdit editor = sender as LookUpEdit;

        //    if (editor != null)
        //    {
        //        // Get the selected item
        //        Location selectedLocation = editor.GetSelectedDataRow() as Location;

        //        // Perform actions based on the selected value
        //        if (selectedLocation != null)
        //        {
        //            // Access the LocationID property
        //            repositorylocationId = selectedLocation.LocationID;

        //            // Do something with the LocationID
        //            //MessageBox.Show($"Selected LocationID: {locationId}");
        //        }
        //    }
        //}
        private void repositoryItemLookUpEditLocation_EditValueChanged(object sender, EventArgs e)
        {
            LookUpEdit editor = sender as LookUpEdit;

            if (editor != null)
            {   ///hamid commmmmmmmmmmmmmmmmmmmment
                //// Get the selected item
                //Location selectedLocation = editor.GetSelectedDataRow() as Location;

                //// Perform actions based on the selected value
                //if (selectedLocation != null)
                //{
                //    // Access the LocationID property
                //    repositorylocationId = selectedLocation.LocationID;

                //    // Check if the location has already been registered in LocItem list
                //    bool isLocationRegistered = locItemBindingSource
                //        .Cast<LocItem>()
                //        .Any(item => item.LocationID == repositorylocationId);

                //    if (isLocationRegistered)
                //    {
                //        // Location is already registered, show a message or perform necessary actions
                //        MessageBox.Show("This location has already been registered.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                //        // You may want to clear the selection or handle it differently based on your requirements
                //        // Clear the Location editor's value to indicate that the location is not valid
                //        editor.EditValue = null;

                //        // Optionally, you can also set repositorylocationId to 0 or another value to indicate an invalid location
                //        repositorylocationId = 0;
                //    }
                //    else
                //    {
                //        // Location is not registered, continue with the selected location
                //        // You can perform additional actions if needed
                //    }
                //}
            }
        }


        private void gridView2_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            try
            {
                GridView view = sender as GridView;

                // Check if the modified row is not a new row
                if (e.RowHandle >= 0)
                {    //hamid commmmmmmmmmmmmmmmmmmmmmmmmmment
                    //LocItem modifiedlocitem = view.GetRow(e.RowHandle) as LocItem;

                    //if (modifiedlocitem != null)
                    //{
                    //    // Validate the LocItem data
                    //    if (!ValidateLocItem(modifiedlocitem))
                    //    {
                    //        // Validation failed, set an error message
                    //        view.SetColumnError(view.Columns["Qty"], "Validation failed. Please check your data.");
                    //       // e.Valid = false; // Mark the row as invalid
                    //    }
                    //    else
                    //    {
                    //        //using (DatabaseContext _context = new DatabaseContext())
                    //        //{
                    //        //    ILocItemRepository locItemRepository = new LocItemService(_context);
                    //        //    locItemRepository.UpdateLocitem(modifiedlocitem);
                    //        //}
                    //        using (UnitOfWork unitOfWork = new UnitOfWork(new DatabaseContext()))
                    //        {
                    //            unitOfWork.LocItemRepository.UpdateLocitem(modifiedlocitem);
                    //            unitOfWork.Save();
                    //        }
                    //    }
                    //}
                }
            }
            catch (Exception ex)
            {
                // Handle or log the exception as needed
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void gridView2_InitNewRow(object sender, InitNewRowEventArgs e)
        {
            GridView view = sender as GridView;
            view.SetRowCellValue(e.RowHandle, "ItemId", itemId); // itemId should be accessible in this scope
        }
    }
}
